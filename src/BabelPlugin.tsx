// @ts-nocheck
import path from "path";
import fs from "fs";
import { parse } from "./Parser";

function defaultResolve(src, file) {
	return path.resolve(path.dirname(file), src);
}

var resolve;

export function ReactNativeWithCssBabelPlugin(opt) {
	var t = opt.types;
	var template = opt.template;

	return {
		manipulateOptions: function (rp) {
			var resolveModuleSource = rp.resolveModuleSource;
			resolve = resolveModuleSource || defaultResolve;
		},

		visitor: {
			ImportDeclaration: {
				exit: function (curPath, state) {
					var opts = state.opts;
					var file = state.file;

					var importPath = curPath.node.source.value;
					var jsFilename = file.opts.filename;

					if (importPath.endsWith(".css")) {
						prodHandler(curPath, opts, importPath, jsFilename, template, t);
					}
				},
			},
		},
	};
}

/**
 *  In prod, the js's object which is generated by the related css file will write directly in the js file.
 * @param curPath
 * @param opts
 * @param importPath
 * @param jsFilename
 * @param template
 * @param t
 */

function prodHandler(curPath, opts, importPath, jsFilename, template, t) {
	var absPath = resolve(importPath, jsFilename);

	const cssStr = fs.readFileSync(absPath, { encoding: "utf8" });
	const styles = parse(cssStr);

	curPath.replaceWithSourceString(`(${JSON.stringify(styles)}).forEach(s=>globalThis.styles.push(s))`);
}
